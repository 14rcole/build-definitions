---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: build-definitions-bundle-push
  annotations:
    pipelinesascode.tekton.dev/on-event: "push"
    pipelinesascode.tekton.dev/on-target-branch: "main"
    pipelinesascode.tekton.dev/task: "[task/update-infra-deployments/0.1/update-infra-deployments.yaml, task/git-clone/0.1/git-clone.yaml, .tekton/tasks/buildah.yaml]"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    - name: git-url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineSpec:
    params:
      - description: 'Source Repository URL'
        name: git-url
        type: string
      - description: 'Revision of the Source Repository'
        name: revision
        type: string
    tasks:
      - name: clone-repository
        params:
          - name: url
            value: $(params.git-url)
          - name: revision
            value: "$(params.revision)"
          - name: depth
            value: "0"
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: workspace
      - name: build-container
        params:
          - name: IMAGE
            value: quay.io/redhat-appstudio/appstudio-utils:{{ revision }}
          - name: CONTEXT
            value: appstudio-utils
        runAfter:
          - clone-repository
        taskRef:
          name: buildah
        workspaces:
          - name: source
            workspace: workspace
      - name: build-bundles
        params:
          - name: revision
            value: "$(params.revision)"
        runAfter:
          - build-container
        workspaces:
          - name: source
            workspace: workspace
        taskSpec:
          params:
            - name: revision
              type: string
          steps:
            - name: build-bundles
              image: quay.io/redhat-appstudio/appstudio-utils:{{ revision }}
              workingDir: $(workspaces.source.path)
              command: ["./hack/build-and-push.sh"]
              env:
                - name: MY_QUAY_USER
                  value: redhat-appstudio-tekton-catalog
                - name: BUILD_TAG
                  value: "$(params.revision)"
                - name: SKIP_BUILD
                  value: "1"
                - name: SKIP_INSTALL
                  value: "1"
              volumeMounts:
                - mountPath: /root/.docker/config.json
                  subPath: .dockerconfigjson
                  name: quay-secret
          volumes:
          - name: quay-secret
            secret:
              secretName: redhat-appstudio-tekton-catalog-build-definitions-pull-secret
          workspaces:
            - name: source
      - name: update-infra-repo
        runAfter:
          - build-bundles
        params:
          - name: ORIGIN_REPO
            value: $(params.git-url)
          - name: REVISION
            value: $(params.revision)
          - name: SCRIPT
            value: |
              sed -i -E 's/[0-9a-f]{40}/$(params.revision)/g' components/build-service/base/build-pipeline-selectors/build-pipeline-selector.yaml
        taskRef:
          name: update-infra-deployments
      - name: update-ec-policies
        runAfter:
          - build-bundles
        taskRef:
          name: update-infra-deployments
        params:
          - name: ORIGIN_REPO
            value: $(params.git-url)
          - name: REVISION
            value: $(params.revision)
          - name: TARGET_GH_REPO
            value: enterprise-contract/ec-policies
          - name: SCRIPT_IMAGE
            value: "$(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)"
          - name: GITHUB_APP_INSTALLATION_ID
            value: "35269653"
          - name: SCRIPT
            value: |
              export BUNDLES_FILE=data/acceptable_tekton_bundles.yml

              BUNDLES=(
                $(workspaces.artifacts.path)/task-bundle-list
                $(workspaces.artifacts.path)/pipeline-bundle-list
              )
              BUNDLES_PARAM=($(cat ${BUNDLES[@]} | awk '{ print "--bundle=" $0 }'))
              ec track bundle \
                --input "${BUNDLES_FILE}" \
                --replace \
                ${BUNDLES_PARAM[@]}

              # Ensure no bundles were previously missed
              ./hack/check-acceptable-tekton-bundles.sh "${BUNDLES_FILE}"
        workspaces:
          - name: artifacts
            workspace: workspace
      - name: build-acceptable-bundles
        runAfter:
          - build-bundles
        workspaces:
          - name: artifacts
            workspace: workspace
        taskSpec:
          workspaces:
            - name: artifacts
              description: Workspace containing arbitrary artifacts used during the task run.
          volumes:
          - name: quay-secret
            secret:
              secretName: redhat-appstudio-tekton-catalog-build-definitions-pull-secret
          steps:
            - name: build-bundles
              image: quay.io/redhat-appstudio/appstudio-utils:{{ revision }}
              script: |-
                #!/usr/bin/env bash
                set -euo pipefail

                BUNDLES=(
                  $(workspaces.artifacts.path)/task-bundle-list
                  $(workspaces.artifacts.path)/pipeline-bundle-list
                )
                touch ${BUNDLES[@]}
                BUNDLES_PARAM=($(cat ${BUNDLES[@]} | awk '{ print "--bundle=" $0 }'))

                # The OPA data bundle is tagged with the current timestamp. This has two main
                # advantages. First, it prevents the image from accidentally not having any tags,
                # and getting garbage collected. Second, it helps us create a timeline of the
                # changes done to the data over time.
                TAG="$(date '+%s')"
                DATA_BUNDLE_REPO='quay.io/redhat-appstudio-tekton-catalog/data-acceptable-bundles'

                # Update the OPA data bundle.
                ec track bundle \
                  --input "oci:${DATA_BUNDLE_REPO}:latest" \
                  --output "oci:${DATA_BUNDLE_REPO}:${TAG}" \
                  --freshen \
                  ${BUNDLES_PARAM[@]}

                # To facilitate usage in some contexts, tag the image with the floating "latest" tag.
                skopeo copy "docker://${DATA_BUNDLE_REPO}:${TAG}" "docker://${DATA_BUNDLE_REPO}:latest"
              volumeMounts:
                - mountPath: /root/.docker/config.json
                  subPath: .dockerconfigjson
                  name: quay-secret
    workspaces:
      - name: workspace
  workspaces:
    - name: workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi

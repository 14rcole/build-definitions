---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: verify-enterprise-contract
  annotations:
    tekton.dev/displayName: Verify Enterprise Contract
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: cosign, chains, signature, opa
  labels:
    app.kubernetes.io/version: "0.1"

spec:
  description: Verify the enterprise contract is met
  params:
    - name: IMAGE_REF
      type: string
      description: Image reference to verify

    - name: PIPELINERUN_NAME
      type: string
      description: The name of the pipelinerun to gather task results from

    - name: HACBS_TEST_OUTPUT
      type: string
      description: The name of the tekton result that holds the test output
      default: HACBS_TEST_OUTPUT

    - name: PUBLIC_KEY
      type: string
      description: >-
        Public key used to verify signatures. Must be a valid k8s cosign
        reference, e.g. k8s://my-space/my-secret where my-secret contains
        the expected cosign.pub attribute.

    - name: COSIGN_EXPERIMENTAL
      type: string
      description: Control transparency log lookups. Set to "0" to disable it.
      default: "1"

    - name: REKOR_HOST
      type: string
      description: Rekor host for transparency log lookups
      default: https://rekor.sigstore.dev

    # TODO: We should probably use a bundle URL for this:
    # https://www.openpolicyagent.org/docs/v0.12.2/bundles/#bundle-file-format
    # Or an OCI image:
    # https://github.com/open-policy-agent/opa/issues/1413
    - name: POLICY_REPO
      type: string
      description: Git url for rego policies
      default: https://github.com/hacbs-contract/ec-policies.git

    - name: POLICY_REPO_REF
      type: string
      description: Git sha, branch or tag in git repo for rego policies
      default: main

    - name: STRICT_POLICY
      type: string
      description: Fail the task if policy fails. Set to "0" to disable it.
      default: "1"

  results:
    - name: OUTPUT
      description: A list of policy violations
    - name: PASSED
      description: A string formatted boolean, either true or false

  steps:
    - name: verify-image-signature
      image: appstudio-utils
      command: [cosign]
      args:
        - verify
        - "--key=$(params.PUBLIC_KEY)"
        - "--rekor-url=$(params.REKOR_HOST)"
        - $(params.IMAGE_REF)
      env:
        # TODO: What if the workspace is not set? Seems to have no effect:
        #   https://issues.redhat.com/browse/HACBS-316
        # TODO: Is it SSL_CERT_DIR or SSL_CERTS_DIR ?
        - name: SSL_CERT_DIR
          value: $(workspaces.sslcertdir.path)
        - name: COSIGN_EXPERIMENTAL
          value: $(params.COSIGN_EXPERIMENTAL)
      volumeMounts:
        - name: shared
          mountPath: /shared

    - name: verify-image-attestation-signature
      image: appstudio-utils
      command: [cosign]
      args:
        - verify-attestation
        - "--key=$(params.PUBLIC_KEY)"
        - "--rekor-url=$(params.REKOR_HOST)"
        - "--output-file=/shared/image-in-toto-attestation.json"
        - $(params.IMAGE_REF)
      env:
        # TODO: What if the workspace is not set? Seems to have no effect:
        #   https://issues.redhat.com/browse/HACBS-316
        # TODO: Is it SSL_CERT_DIR or SSL_CERTS_DIR ?
        - name: SSL_CERT_DIR
          value: $(workspaces.sslcertdir.path)
        - name: COSIGN_EXPERIMENTAL
          value: $(params.COSIGN_EXPERIMENTAL)
      volumeMounts:
        - name: shared
          mountPath: /shared

    - name: fetch-test-data
      image: appstudio-utils
      command: [/appstudio-utils/util-scripts/fetch-test-data.sh]
      args:
        - $(params.PIPELINERUN_NAME)
        - $(params.HACBS_TEST_OUTPUT)
      env:
        - name: EC_WORK_DIR
          value: /shared/ec-work-dir
      volumeMounts:
        - name: shared
          mountPath: /shared

    - name: verify-attestation-with-policy
      image: appstudio-utils
      command: [/appstudio-utils/util-scripts/verify-attestation-with-policy.sh]
      args:
        - /shared/image-in-toto-attestation.json
        - $(results.OUTPUT.path)
        - $(results.PASSED.path)
      env:
        - name: EC_WORK_DIR
          value: /shared/ec-work-dir
        - name: POLICY_REPO_REF
          value: $(params.POLICY_REPO_REF)
        - name: POLICY_REPO
          value: $(params.POLICY_REPO)
        - name: STRICT_POLICY
          value: $(params.STRICT_POLICY)
      volumeMounts:
        - name: shared
          mountPath: /shared

  workspaces:
    - name: sslcertdir
      optional: true

  volumes:
    - name: shared
      emptyDir: {}

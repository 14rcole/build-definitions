apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: hacbs java
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: hacbs, java, workspace
  name: hacbs-java
spec:
  description: hacbs-java task builds and pushes a container image using JVM build service.
  params:
  - name: MAVEN_IMAGE
    type: string
    description: Maven base image
    default: gcr.io/cloud-builders/mvn@sha256:57523fc43394d6d9d2414ee8d1c85ed7a13460cbb268c3cd16d28cfb3859e641  # tag: latest
  - name: GOALS
    description: maven goals to run
    type: array
    default:
      - "package"
  - name: MAVEN_MIRROR_URL
    description: The Maven repository mirror url
    type: string
    default: http://localhost:2000/maven2
  - name: CONTEXT_DIR
    type: string
    description: >-
      The context directory within the repository for sources on
      which we want to execute maven goals.
    default: "."
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    name: TLSVERIFY
    type: string
  - name: DEPENDENCY_ANALYSER_IMAGE
    type: string
    description: >-
      The image to use for dependency analysis.
    default: "quay.io/redhat-appstudio/hacbs-jvm-dependency-analyser:209988a74904c718386e8101da7704197fe3a152"
  - name: DEPENDENCY_ANALYSER_PATH
    type: string
    description: >-
      The path to use for dependency analysis.
    default: "target"
  - description: Location of the repo where image has to be pushed
    name: IMAGE
    type: string
  - default: registry.access.redhat.com/ubi8/buildah@sha256:31f84b19a0774be7cfad751be38fc97f5e86cefd26e0abaec8047ddc650b00bf
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  # Additional parameter for auth configuration
  - default: ""
    description: Extra parameters passed for the push command when pushing images.
    name: PUSH_EXTRA_ARGS
    type: string
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository where the built image was pushed
    name: IMAGE_URL
  steps:
  - name: mvn-settings
    image: registry.access.redhat.com/ubi8/ubi-minimal:8.5
    workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
    script: |
      #!/usr/bin/env bash

      [[ -f settings.xml ]] && \
      echo 'using existing settings.xml' && exit 0

      cat > settings.xml <<EOF
      <settings>
        <servers>
          <!-- The servers added here are generated from environment variables. Don't change. -->
          <!-- ### SERVER's USER INFO from ENV ### -->
        </servers>
        <mirrors>
          <!-- The mirrors added here are generated from environment variables. Don't change. -->
          <!-- ### mirrors from ENV ### -->
        </mirrors>
        <proxies>
          <!-- The proxies added here are generated from environment variables. Don't change. -->
          <!-- ### HTTP proxy from ENV ### -->
        </proxies>
      </settings>
      EOF

      if [ -n "$(params.MAVEN_MIRROR_URL)" ]; then
        xml="    <mirror>\
          <id>mirror.default</id>\
          <url>$(params.MAVEN_MIRROR_URL)</url>\
          <mirrorOf>*</mirrorOf>\
        </mirror>"
        sed -i "s|<!-- ### mirrors from ENV ### -->|$xml|" settings.xml
      fi

  - name: mvn-goals
    image: $(params.MAVEN_IMAGE)
    workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
    command: ["/usr/bin/mvn"]
    args:
      - -s
      - settings.xml
      - "$(params.GOALS)"
      - -Dmaven.test.skip
  - name: analyse-dependencies
    image: $(params.DEPENDENCY_ANALYSER_IMAGE)
    args:
      - path
      - $(workspaces.source.path)/$(params.CONTEXT_DIR)/$(params.DEPENDENCY_ANALYSER_PATH)
  - name: docker-settings
    image: registry.access.redhat.com/ubi8/ubi-minimal:8.5
    workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
    script: |
      #!/usr/bin/env bash

      cat > Dockerfile.gen <<EOF
      FROM registry.access.redhat.com/ubi8/openjdk-17:1.12

      ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'


      # We make four distinct layers so if there are application changes the library layers can be re-used
      COPY --chown=185 target/* /deployments/

      EXPOSE 8080
      USER 185
      ENV AB_JOLOKIA_OFF=""
      ENV JAVA_OPTS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
      ENV JAVA_APP_JAR="/deployments/quarkus-run.jar"
      EOF
  - command:
    - buildah
    - bud
    - --storage-driver=vfs
    - --tls-verify=$(params.TLSVERIFY)
    - --layers
    - -f
    - Dockerfile.gen
    - -t
    - $(params.IMAGE)
    - .
    image: $(params.BUILDER_IMAGE)
    name: build
    resources: {}
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
  - script: >
      buildah
      push
      --storage-driver=vfs
      --tls-verify=$(params.TLSVERIFY)
      --digestfile=$(workspaces.source.path)/image-digest
      $(params.PUSH_EXTRA_ARGS)
      $(params.IMAGE)
      docker://$(params.IMAGE)
    image: $(params.BUILDER_IMAGE)
    name: push
    resources: {}
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: digest-to-results
    resources: {}
    script: |
      cat "$(workspaces.source.path)"/image-digest | tee $(results.IMAGE_DIGEST.path)
      echo "$(params.IMAGE)" | tee $(results.IMAGE_URL.path)
  sidecars:
    - image: quay.io/redhat-appstudio/hacbs-jvm-sidecar:209988a74904c718386e8101da7704197fe3a152
      imagePullPolicy: Always
      env:
        - name: QUARKUS_REST_CLIENT_CACHE_SERVICE_URL
          value: "http://hacbs-jvm-cache.jvm-build-service.svc.cluster.local"
        - name: QUARKUS_S3_ENDPOINT_OVERRIDE
          value: "http://localstack.jvm-build-service.svc.cluster.local:4572"
        - name: QUARKUS_S3_AWS_REGION
          value: "us-east-1"
        - name: QUARKUS_S3_AWS_CREDENTIALS_STATIC_PROVIDER_ACCESS_KEY_ID
          value: "accesskey"
        - name: QUARKUS_S3_AWS_CREDENTIALS_STATIC_PROVIDER_SECRET_ACCESS_KEY
          value: "secretkey"
        - name: QUARKUS_S3_AWS_CREDENTIALS_TYPE
          value: "static"
      name: proxy
      livenessProbe:
        httpGet:
          path: /q/health/live
          port: 2000
        initialDelaySeconds: 1
        periodSeconds: 3
      readinessProbe:
        httpGet:
          path: /q/health/ready
          port: 2000
        initialDelaySeconds: 1
        periodSeconds: 3
      resources:
        requests:
          memory: "128Mi"
          cpu: "250m"
        limits:
          memory: "512Mi"
          cpu: "500m"
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  workspaces:
  - mountPath: /workspace/source
    name: source
